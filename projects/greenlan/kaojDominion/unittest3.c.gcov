        -:    0:Source:unittest3.c
        -:    0:Programs:17
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testUpdateCoins: testUpdateCoins.c dominion.o rngs.o
        -:    6: *      gcc -o testUpdateCoins -g  testUpdateCoins.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8:  This file is based off of the update coins file given in the course materials
        -:    9: */
        -:   10:
        -:   11:  /*Test the function whoseTurn*/
        -:   12: 
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include <string.h>
        -:   16:#include <stdio.h>
        -:   17:#include <assert.h>
        -:   18:#include "rngs.h"
        -:   19:
        -:   20:// set NOISY_TEST to 0 to remove printfs from output
        -:   21:#define NOISY_TEST 1
        -:   22:
        -:   23:// set TEST_FUNCTION to whatever thing is being tested
        -:   24:#define TEST_FUNCTION "whoseTurn"
        -:   25:
        -:   26:// Self created assert function for testing functions
        2:   27:void assertTrue(int b)
        -:   28:{
        2:   29:	if(b == 0)
        -:   30:	{
    #####:   31:		printf("Test Failed\n");
        -:   32:	}
        -:   33:	else
        -:   34:	{
        2:   35:		printf("Test Successful\n");
        -:   36:	}
        2:   37:}
        -:   38:
        1:   39:int main() {
        -:   40:	//Initialize game parameters
        -:   41:	int b;
        1:   42:    int seed = 1000;
        1:   43:    int numPlayer = 2;
        1:   44:    int maxBonus = 10;
        -:   45:    int p, r, handCount;
        -:   46:    int bonus;
        1:   47:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   48:               , remodel, smithy, village, baron, great_hall};
        -:   49:    struct gameState G, testG;
        1:   50:    int maxHandCount = 5;
        -:   51:	
        -:   52:	// Begin the testing
        1:   53:    printf ("TESTING %s\n", TEST_FUNCTION);
        1:   54:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   55:    r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
        1:   56:	G.whoseTurn = 0;
        -:   57:	
        -:   58:	int turn;
        -:   59:	
        -:   60:	// TEST 1
        1:   61:	printf("Test player 0 turn\n"); //Test being run
        1:   62:	memcpy(&testG, &G, sizeof(struct gameState)); //save game state to compare
        1:   63:	turn = whoseTurn(&testG);
        1:   64:    assertTrue(turn == 0); //Test result
        -:   65:	
        -:   66:	// TEST 2
        1:   67:	G.whoseTurn = 1;
        1:   68:	printf("Test player 1 turn\n"); //Test being run
        1:   69:	memcpy(&testG, &G, sizeof(struct gameState)); //save game state to compare
        1:   70:	turn = whoseTurn(&testG);
        1:   71:    assertTrue(turn == 1); //Test result
        -:   72:
        -:   73:	//End the testing
        1:   74:    printf("End Testing for %s\n",TEST_FUNCTION);
        -:   75:
        1:   76:    return 0;
        -:   77:}

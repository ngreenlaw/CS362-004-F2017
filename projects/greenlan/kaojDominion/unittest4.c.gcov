        -:    0:Source:unittest4.c
        -:    0:Programs:17
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testUpdateCoins: testUpdateCoins.c dominion.o rngs.o
        -:    6: *      gcc -o testUpdateCoins -g  testUpdateCoins.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8:  This file is based off of the update coins file given in the course materials
        -:    9: */
        -:   10:
        -:   11:  /*Test the function fullDeckCount*/
        -:   12: 
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include <string.h>
        -:   16:#include <stdio.h>
        -:   17:#include <assert.h>
        -:   18:#include "rngs.h"
        -:   19:
        -:   20:// set NOISY_TEST to 0 to remove printfs from output
        -:   21:#define NOISY_TEST 1
        -:   22:
        -:   23:// set TEST_FUNCTION to whatever thing is being tested
        -:   24:#define TEST_FUNCTION "fullDeckCount"
        -:   25:
        -:   26:// Self created assert function for testing functions
        1:   27:void assertTrue(int b)
        -:   28:{
        1:   29:	if(b == 0)
        -:   30:	{
    #####:   31:		printf("Test Failed\n");
        -:   32:	}
        -:   33:	else
        -:   34:	{
        1:   35:		printf("Test Successful\n");
        -:   36:	}
        1:   37:}
        -:   38:
        1:   39:int main() {
        -:   40:	//Initialize game parameters
        -:   41:	int b;
        1:   42:    int seed = 1000;
        1:   43:    int numPlayer = 2;
        1:   44:    int maxBonus = 10;
        -:   45:    int p, r, handCount;
        -:   46:    int bonus;
        1:   47:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   48:               , remodel, smithy, village, baron, great_hall};
        -:   49:    struct gameState G, testG;
        1:   50:    int maxHandCount = 5;
        1:   51:    int player = 0;
        -:   52:	// Begin the testing
        1:   53:    printf ("TESTING %s\n", TEST_FUNCTION);
        1:   54:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   55:    r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
        1:   56:	G.deckCount[0] = 1;
        1:   57:	G.handCount[0] = 2;
        1:   58:	G.discardCount[0] = 3;
        1:   59:	G.deck[player][0] = village;
        1:   60:	G.hand[player][0] = village;
        1:   61:	G.hand[player][1] = village;
        1:   62:	G.discard[player][0] = village;
        1:   63:	G.discard[player][1] = village;
        1:   64:	G.discard[player][2] = copper;
        -:   65:	
        -:   66:	int result;
        -:   67:	
        -:   68:	// TEST 1
        1:   69:	printf("Given 6 cards in between hand, deck and discard.\n"); //Test being run
        1:   70:	memcpy(&testG, &G, sizeof(struct gameState)); //save game state to compare
        1:   71:	result = fullDeckCount(0,village,&testG);
        1:   72:	printf("Check to see that the result is 5 village cards\n");
        1:   73:    assertTrue(result == 5); //Test result
        -:   74:
        -:   75:	//End the testing
        1:   76:    printf("End Testing for %s\n",TEST_FUNCTION);
        -:   77:
        1:   78:    return 0;
        -:   79:}

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testUpdateCoins: testUpdateCoins.c dominion.o rngs.o
        -:    6: *      gcc -o testUpdateCoins -g  testUpdateCoins.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8:  This file is based off of the update coins file given in the course materials
        -:    9: */
        -:   10:
        -:   11: /*Test the function updateCoins*/
        -:   12: 
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include <string.h>
        -:   16:#include <stdio.h>
        -:   17:#include <assert.h>
        -:   18:#include "rngs.h"
        -:   19:
        -:   20:// set NOISY_TEST to 0 to remove printfs from output
        -:   21:#define NOISY_TEST 1
        -:   22:
        -:   23:// set TEST_FUNCTION to whatever thing is being tested
        -:   24:#define TEST_FUNCTION "updateCoins"
        -:   25:
        -:   26:// Self created assert function for testing functions
        4:   27:void assertTrue(int b)
        -:   28:{
        4:   29:	if(b == 0)
        -:   30:	{
    #####:   31:		printf("Test Failed\n");
        -:   32:	}
        -:   33:	else
        -:   34:	{
        4:   35:		printf("Test Successful\n");
        -:   36:	}
        4:   37:}
        -:   38:
        1:   39:int main() {
        -:   40:	//Initialize game parameters
        -:   41:	int b;
        1:   42:    int seed = 1000;
        1:   43:    int numPlayer = 2;
        1:   44:    int maxBonus = 10;
        -:   45:    int p, r, handCount;
        -:   46:    int bonus;
        1:   47:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   48:               , remodel, smithy, village, baron, great_hall};
        -:   49:    struct gameState G, testG;
        1:   50:    int maxHandCount = 5;
        -:   51:	
        -:   52:	// Begin the testing
        1:   53:    printf ("TESTING %s\n", TEST_FUNCTION);
        1:   54:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   55:    r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
        -:   56:	//Initialize the hands of the players
        1:   57:	G.coins = 0;
        1:   58:	G.handCount[0] = maxHandCount;
        1:   59:	G.handCount[1] = maxHandCount;
        1:   60:	G.hand[0][0] = copper;
        1:   61:	G.hand[0][1] = province;
        1:   62:	G.hand[0][2] = province;
        1:   63:	G.hand[0][3] = province;
        1:   64:	G.hand[0][4] = province;
        1:   65:	G.hand[1][0] = silver;
        1:   66:	G.hand[1][1] = province;
        1:   67:	G.hand[1][2] = province;
        1:   68:	G.hand[1][3] = province;
        1:   69:	G.hand[1][4] = province;
        -:   70:	
        -:   71:	// TEST 1
        1:   72:	printf("Test no bonus coins and one copper\n"); //Test being run
        1:   73:	memcpy(&testG, &G, sizeof(struct gameState)); //save game state to compare
        1:   74:	updateCoins(0,&testG, 0);
        -:   75:	/* Do the test material here where b is boolean to see if test succeeded*/
        1:   76:	printf("Test that coins is 1\n");
        1:   77:	assertTrue(testG.coins == 1);
        -:   78:	
        -:   79:	// TEST 2
        1:   80:	printf("Test no bonus coins and one silver\n"); //Test being run
        1:   81:	G.coins = 0;
        1:   82:	memcpy(&testG, &G, sizeof(struct gameState)); //save game state to compare
        1:   83:	updateCoins(1,&testG, 0);
        -:   84:	/* Do the test material here where b is boolean to see if test succeeded*/
        1:   85:	printf("Test that coins is 2\n");
        1:   86:	assertTrue(testG.coins == 2);
        -:   87:	
        -:   88:	// TEST 3
        1:   89:	printf("Test no bonus coins and one gold\n"); //Test being run
        1:   90:	G.coins = 0;
        1:   91:	G.hand[0][0] = gold;
        1:   92:	G.hand[0][1] = province;
        1:   93:	G.hand[0][2] = province;
        1:   94:	G.hand[0][3] = province;
        1:   95:	G.hand[0][4] = province;
        1:   96:	memcpy(&testG, &G, sizeof(struct gameState)); //save game state to compare
        1:   97:	updateCoins(0,&testG, 0);
        -:   98:	/* Do the test material here where b is boolean to see if test succeeded*/
        1:   99:	printf("Test that coins is 3\n");
        1:  100:	assertTrue(testG.coins == 3);
        -:  101:
        -:  102:	// TEST 4
        1:  103:	printf("Test 2 bonus coins and one silver\n"); //Test being run
        1:  104:	G.coins = 0;
        1:  105:	memcpy(&testG, &G, sizeof(struct gameState)); //save game state to compare
        1:  106:	updateCoins(1,&testG, 2);
        -:  107:	/* Do the test material here where b is boolean to see if test succeeded*/
        1:  108:	printf("Test that coins is 4\n");
        1:  109:	assertTrue(testG.coins == 4);
        -:  110:	
        -:  111:	//End the testing
        1:  112:    printf("End Testing for %s\n",TEST_FUNCTION);
        -:  113:
        1:  114:    return 0;
        -:  115:}
